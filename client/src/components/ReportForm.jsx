import React, { useState, useRef } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import { MapPin, File, ShieldAlert, Loader2, ArrowLeft } from "lucide-react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import ReCAPTCHA from "react-google-recaptcha";

const ReportForm = () => {
  const fileInputRef = useRef(null);
  const recaptchaRef = useRef(null);

  const siteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY;

  const [captchaToken, setCaptchaToken] = useState("");
  const [selectedType, setSelectedType] = useState("");
  const [otherType, setOtherType] = useState(""); // New state for custom "Other" type
  const [description, setDescription] = useState("");
  const [location, setLocation] = useState("");
  const [recipientEmail, setRecipientEmail] = useState("");
  const [generatedReport, setGeneratedReport] = useState("");
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const locationInputRef = useRef(null);

  const handleCaptcha = (value) => {
    setCaptchaToken(value);
  };

  const handleGenerateReport = async () => {
    if (!selectedType || !description || !location) {
      toast.error("Please complete incident type, description, and location.");
      return;
    }

    try {
      setLoading(true);
      const response = await axios.post(import.meta.env.VITE_GENERATE_REPORT, {
        incidentDetails: { incidentType: selectedType, location, description },
      });

      setGeneratedReport(response.data?.message || "No report generated.");
      toast.success("Draft generated by AI!");
    } catch (err) {
      toast.error("Error generating report.");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!captchaToken) {
      toast.error("Please verify you are human.");
      return;
    }
    setLoading(true);

    const formData = new FormData();
    formData.append(
      "incidentType",
      selectedType === "Other" ? otherType : selectedType
    ); // Use otherType if selectedType is "Other"
    formData.append("description", description);
    formData.append("location", location);
    formData.append("recipient", recipientEmail);
    formData.append("generatedDraft", generatedReport);
    if (file) formData.append("evidence", file);
    formData.append("captcha", captchaToken);

    try {
      const response = await axios.post(
        import.meta.env.VITE_SUBMIT_REPORT,
        formData,
        {
          headers: { "Content-Type": "multipart/form-data" },
        }
      );
      toast.success(response.data.message);

      // Reset all form fields
      setSelectedType("");
      setOtherType(""); // Reset custom "Other" type
      setDescription("");
      setLocation("");
      setRecipientEmail("");
      setGeneratedReport("");
      setCaptchaToken("");
      if (recaptchaRef.current) recaptchaRef.current.reset();
      if (fileInputRef.current) fileInputRef.current.value = null;
      setFile(null);
    } catch (err) {
      toast.error("Failed to submit the report.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="px-4 py-10 max-w-3xl mx-auto">
      <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-6 sm:p-10 space-y-8">
        <Link
          to="/"
          className="absolute top-24 left-8 p-2 bg-indigo-600 text-white rounded-full hover:bg-indigo-700 transition"
        >
          <ArrowLeft className="w-6 h-6" />
        </Link>

        <h2 className="text-3xl font-bold text-indigo-600 text-center">
          Submit an Incident Report
        </h2>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Incident Details */}
          <div className="space-y-4">
            <h3 className="font-semibold text-indigo-500 flex items-center gap-2">
              <ShieldAlert className="w-5 h-5" /> Incident Details
            </h3>

            <select
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
              required
              className="w-full p-3 rounded-lg border border-indigo-300 focus:ring-2 focus:ring-indigo-500"
            >
              <option value="">Choose incident type</option>
              <option value="Harassment">Harassment</option>
              <option value="Discrimination">Discrimination</option>
              <option value="Abuse">Abuse</option>
              <option value="Bullying">Bullying</option>
              <option value="Violence">Violence</option>
              <option value="Other">Other</option>
            </select>

            {/* Conditionally Render Input Box for 'Other' */}
            {selectedType === "Other" && (
              <div className="space-y-4">
                <label className="font-semibold text-indigo-500">
                  Please specify the incident type
                </label>
                <input
                  type="text"
                  value={otherType}
                  onChange={(e) => setOtherType(e.target.value)}
                  required
                  className="w-full p-3 rounded-lg border border-indigo-300 focus:ring-2 focus:ring-indigo-500"
                  placeholder="Specify incident type"
                />
              </div>
            )}

            <textarea
              rows={5}
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              required
              className="w-full p-3 rounded-lg border border-indigo-300 focus:ring-2 focus:ring-indigo-500"
              placeholder="Describe the incident clearly..."
            />
          </div>

          {/* Location & Recipient */}
          <div className="space-y-4">
            <h3 className="font-semibold text-indigo-500 flex items-center gap-2">
              <MapPin className="w-5 h-5" /> Location & Recipient
            </h3>

            <input
              type="text"
              ref={locationInputRef}
              value={location}
              onChange={(e) => setLocation(e.target.value)}
              required
              className="w-full p-3 rounded-lg border border-indigo-300 focus:ring-2 focus:ring-indigo-500"
              placeholder="Location of the incident"
            />

            <input
              type="email"
              value={recipientEmail}
              onChange={(e) => setRecipientEmail(e.target.value)}
              required
              className="w-full p-3 rounded-lg border border-indigo-300 focus:ring-2 focus:ring-indigo-500"
              placeholder="Enter recipient's email"
            />
          </div>

          {/* Evidence Upload */}
          <div className="space-y-1">
            <label className="block text-sm text-gray-600">
              <File className="w-4 h-4 inline-block mr-2" /> Upload Evidence
              (Optional)
            </label>
            <input
              type="file"
              ref={fileInputRef}
              onChange={(e) => setFile(e.target.files[0])}
              className="hidden"
            />
            <button
              type="button"
              onClick={() => fileInputRef.current.click()}
              className="w-full py-2 mt-2 px-4 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              {file ? file.name : "Choose File"}
            </button>
          </div>

          {/* CAPTCHA */}
          <div className="pt-4">
            <ReCAPTCHA
              ref={recaptchaRef}
              sitekey={siteKey}
              onChange={handleCaptcha}
            />
          </div>

          {/* AI Generation or Submission */}
          {!generatedReport ? (
            <motion.button
              type="button"
              whileTap={{ scale: 0.95 }}
              onClick={handleGenerateReport}
              disabled={loading}
              className="w-full py-3 bg-indigo-600 text-white rounded-lg"
            >
              {loading ? (
                <Loader2 className="w-5 h-5 animate-spin inline-block" />
              ) : (
                "Generate Report"
              )}
            </motion.button>
          ) : (
            <>
              <div className="pt-4">
                <h4 className="font-semibold text-indigo-500">
                  Generated Report:
                </h4>
                <textarea
                  className="w-full mt-2 p-3 rounded-lg border border-indigo-300 focus:ring-2 focus:ring-indigo-500"
                  rows={6}
                  value={generatedReport}
                  onChange={(e) => setGeneratedReport(e.target.value)}
                />
              </div>
              <motion.button
                type="submit"
                whileTap={{ scale: 0.95 }}
                disabled={loading}
                className="w-full py-3 bg-indigo-600 text-white rounded-lg mt-4"
              >
                {loading ? (
                  <Loader2 className="w-5 h-5 animate-spin inline-block" />
                ) : (
                  "Submit Report"
                )}
              </motion.button>
            </>
          )}
        </form>
      </div>
    </div>
  );
};

export default ReportForm;
